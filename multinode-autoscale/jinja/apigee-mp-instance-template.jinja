{#
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
#}

{% set COMPUTE_URL_BASE = 'https://www.googleapis.com/compute/v1/' %}
{% set zone = properties['infra'].datacenters.primary.zone %}
{% set machineType = properties['infra'].rmp.machineType %}
{% set diskSizeGb = properties['infra'].ms.diskSizeGb %}

resources:
  - name: {{ env["name"] }}
    type: compute.v1.instanceTemplate
    properties:
       properties:
         machineType: {{ machineType }}
         metadata:
            items:
            - key: ssh-keys
              value: {{ properties['public_key'] }}
            - key: startup-script
              value: |
               
               export VERSION="{{ properties['repo'].apigee.version }}"
               export REPO_HOST="{{ properties['repo'].apigee.host }}"
               export REPO_PROTOCOL="{{ properties['repo'].apigee.protocol }}"
               export REPO_USER="{{ properties['repo'].apigee.user }}"
               export REPO_PASSWORD="{{ properties['repo'].apigee.password }}"
               export REPO_STAGE={{ properties["repo"].apigee.stage }}
               export HOST_NAMES="{{ properties['HOST_NAMES'] }}"
               export MSIP="{{ properties['msip'] }}"
               export HOST_NAMES=$MSIP:$HOST_NAMES
               export APIGEE_ADMIN_EMAIL="{{ properties['setup'].apigee_admin_email }}"
               export APIGEE_ADMINPW="{{ properties['setup'].apigee_admin_password }}"
               export APIGEE_LDAPPW="{{ properties['setup'].apigee_ldappw }}"
               export ORG_NAME="{{ properties['setup'].org_name }}"
               export SKIP_SMTP="{{ properties['setup'].skip_smtp }}"
               export SMTPHOST="{{ properties['setup'].smtp_host }}"
               export SMTPUSER="{{ properties['setup'].smtp_user }}"
               export SMTPPASSWORD="{{ properties['setup'].smtp_password }}"
               export SMTPSSL="{{ properties['setup'].smtp_ssl }}"
               export SMTPPORT="{{ properties['setup'].smtp_port }}"
               export SMTPMAILFROM="{{ properties['setup'].smtp_mail_from }}"
               export LB_IP_ALIAS="{{ properties['LB_IP_ALIAS'] }}"
               export topology="{{ properties['infra'].topology }}"
               export GIT_CLONE_PATH="{{ properties['setup'].git_clone_path }}"
               export SCRIPT_BASEPATH="{{ properties['setup'].script_base_path }}"

               mkdir -p ~/.ssh
               touch ~/.ssh/id_rsa
               echo "{{ properties['private_key'] }}" >> ~/.ssh/id_rsa
               sed -i s/-----BEGIN[[:space:]]RSA[[:space:]]PRIVATE[[:space:]]KEY-----[[:space:]]//g ~/.ssh/id_rsa
               sed -i s/[[:space:]]-----END[[:space:]]RSA[[:space:]]PRIVATE[[:space:]]KEY-----//g ~/.ssh/id_rsa
               tr  ' ' '\n' < ~/.ssh/id_rsa  > ~/.ssh/test_rsa
               mv -f ~/.ssh/test_rsa ~/.ssh/id_rsa
               sed -i '1s/^/-----BEGIN RSA PRIVATE KEY-----\n/' ~/.ssh/id_rsa
               echo "-----END RSA PRIVATE KEY-----" >> ~/.ssh/id_rsa
               chmod 400 ~/.ssh/id_rsa

               redhat_release=$(cat /etc/os-release|grep VERSION_ID|cut -d'=' -f2|sed 's/\"//g'|sed 's/\..*//g')


               rpm -ivh {{ properties["repo"].thirdparty.epel }}
               yum install  {{ properties['repo'].thirdparty.jq }} -y
               yum install {{ properties['repo'].thirdparty.ansible }} -y
               yum install rng-tools -y
               sed -i 's#ExecStart=/sbin/rngd -f#ExecStart=/sbin/rngd -f -r /dev/urandom#g' /usr/lib/systemd/system/rngd.service
               systemctl daemon-reload
               systemctl start rngd
               
               export TERM=xterm-256color
               mkdir -p /tmp/apigee
               mkdir -p /tmp/apigee/log

               cd /tmp/apigee
               #Lets get ansible scripts from git 
               yum install git -y
               git clone $GIT_CLONE_PATH
               mv $SCRIPT_BASEPATH .
                 
          
               #Copy the right file based on topology
               cp -fr  /tmp/apigee/ansible-scripts/config/config{{ properties['infra'].topology }}.txt /tmp/apigee/ansible-scripts/config/config.txt
               cp -fr  /tmp/apigee/ansible-scripts/inventory/hosts_EDGE_rmp /tmp/apigee/ansible-scripts/inventory/hosts

               bash /tmp/apigee/ansible-scripts/startup-scripts/prepare_config_file.sh $topology $HOST_NAMES $APIGEE_ADMIN_EMAIL $APIGEE_ADMINPW $ORG_NAME $LB_IP_ALIAS $SKIP_SMTP $SMTPHOST $SMTPMAILFROM $SMTPSSL $SMTPUSER $SMTPPASSWORD

               #Performance Related configurations
               bash /tmp/apigee/ansible-scripts/startup-scripts/router_mp_cwc.sh


               cd /tmp/apigee/ansible-scripts/playbook
               ansible-playbook --extra-vars "apigee_user=$REPO_USER apigee_password=$REPO_PASSWORD repohost=$REPO_HOST repoprotocol=$REPO_PROTOCOL repostage=$REPO_STAGE version=$VERSION" -i ../inventory/hosts -u apigee edge-prerequisite-playbook.yaml

               ansible-playbook --extra-vars "apigee_user=$REPO_USER apigee_password=$REPO_PASSWORD repohost=$REPO_HOST repoprotocol=$REPO_PROTOCOL repostage=$REPO_STAGE version=$VERSION" -i ../inventory/hosts -u apigee edge-presetup-playbook.yaml

               

               #Wait for the Management Server to be up

               if [ "$redhat_release" = "7" ]; then
                  while ! echo -n > /dev/tcp/$MSIP/8080 ; do
                     echo "."
                     sleep 30
                  done
               else
                 while ! nc -z $MSIP 8080; do  
                   echo "."
                   sleep 30
                 done
               fi

               echo "Management Server is up"
               #wait for final 10 secs for MS to complete the registeration
               sleep 5

               echo "Installing MP First time only"

               ansible-playbook --extra-vars "apigee_user=$REPO_USER apigee_password=$REPO_PASSWORD repohost=$REPO_HOST repoprotocol=$REPO_PROTOCOL repostage=$REPO_STAGE version=$VERSION" -i ../inventory/hosts -u apigee mp-playbook.yaml

               ansible-playbook -i ../inventory/hosts -u apigee edge-telegraf-playbook.yaml
               
               cd /tmp/apigee
               bash /tmp/apigee/ansible-scripts/startup-scripts/create_mp_startup_shutodown.sh $MSIP $APIGEE_ADMIN_EMAIL $APIGEE_ADMINPW
               sleep 30
               /tmp/apigee/startup.sh

            - key: shutdown-script
              value: |
                
                /opt/apigee/apigee-service/bin/apigee-all stop
                /tmp/apigee/shutdown.sh
                cd /tmp/apigee/ansible-scripts/playbook
                ansible-playbook -i ../inventory/hosts -u apigee edge-uninstall-playbook.yaml
                rm -fr /tmp/apigee
                rm -fr ~/.ssh/id_rsa

         disks:
           - deviceName: boot
             boot: true
             autoDelete: true
             mode: READ_WRITE
             type: PERSISTENT
             initializeParams:
               diskType: pd-ssd
               diskSizeGb: 20
               sourceImage: {{ properties["sourceImage"] }}
         networkInterfaces:
           - accessConfigs:
               - name: external-nat
                 type: ONE_TO_ONE_NAT
             network: $(ref.{{ properties["network"] }}.selfLink)
             subnetwork : $(ref.{{ properties["subnet"] }}.selfLink)