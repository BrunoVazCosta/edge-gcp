{#
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
#}

{% set BASE_NAME =   env['deployment'] + '-' + properties['infra'].datacenters.primary.name + '-' + env['name'] %}
{% set LB_PORT = 80 %}
{% set LB_PORT_TEST = 8080 %}
{% set PROD_VH_PORT = 9001 %}
{% set TEST_VH_PORT = 9002 %}
{% set HEALTH_CHECK_PORT = "15999" %}
{% set GCLOUD_STATIC_IP = "130.211.0.0/16,35.191.0.0/16" %}

resources:
- name: {{ BASE_NAME }}-it
  type: apigee-r-instance-template.jinja
  properties:
    repo: {{ properties['repo'] }}
    infra: {{ properties['infra'] }}
    setup: {{ properties['setup'] }}
    network: {{ properties['network'] }}
    subnet: {{ properties["subnet"] }}
    msip: {{ properties["msip"] }}
    HOST_NAMES: {{ properties["HOST_NAMES"] }}
    public_key: {{ properties["public_key"] }}
    private_key: {{ properties["private_key"] }}
    LB_IP_ALIAS: {{ properties["LB_IP_ALIAS"] }}
    sourceImage: {{ properties["sourceImage"] }}
- name: {{ BASE_NAME }}-mp-it
  type: apigee-mp-instance-template.jinja
  properties:
    repo: {{ properties['repo'] }}
    infra: {{ properties['infra'] }}
    setup: {{ properties['setup'] }}
    network: {{ properties['network'] }}
    subnet: {{ properties["subnet"] }}
    msip: {{ properties["msip"] }}
    HOST_NAMES: {{ properties["HOST_NAMES"] }}
    public_key: {{ properties["public_key"] }}
    private_key: {{ properties["private_key"] }}
    LB_IP_ALIAS: {{ properties["LB_IP_ALIAS"] }}
    sourceImage: {{ properties["sourceImage"] }}
- name: {{ BASE_NAME }}-igm
  type: compute.v1.instanceGroupManager
  properties:
    zone: {{ properties['infra'].datacenters.primary.zone }}
    targetSize: {{ properties['infra'].rmp.autoscale.size }}
    baseInstanceName: {{ BASE_NAME }}-instance
    instanceTemplate: $(ref.{{ BASE_NAME }}-it.selfLink)
    namedPorts:
    - name: {{ BASE_NAME }}-prod
      port: {{ PROD_VH_PORT }}
    - name: {{ BASE_NAME }}-test
      port: {{ TEST_VH_PORT }}
- name: {{ BASE_NAME }}-mp-igm
  type: compute.v1.instanceGroupManager
  properties:
    zone: {{ properties['infra'].datacenters.primary.zone }}
    targetSize: {{ properties['infra'].rmp.autoscale.size }}
    baseInstanceName: {{ BASE_NAME }}-mp-instance
    instanceTemplate: $(ref.{{ BASE_NAME }}-mp-it.selfLink)
- name: {{ BASE_NAME }}-mp-as
  type: compute.v1.autoscaler
  properties:
    zone: {{ properties['infra'].datacenters.primary.zone }}
    target: $(ref.{{ BASE_NAME }}-mp-igm.selfLink)
    autoscalingPolicy:
      maxNumReplicas: {{ properties['infra'].rmp.autoscale.maxSize }}
      coolDownPeriodSec: 600
- name: {{ BASE_NAME }}-hc
  type: compute.v1.httpHealthCheck
  properties:
    port: {{ HEALTH_CHECK_PORT }}
    requestPath: /v1/servers/self/up
- name: {{ BASE_NAME }}-bes-prod
  type: compute.v1.backendService
  properties:
    portName: {{ BASE_NAME }}-prod
    backends:
      - name: {{ BASE_NAME }}-backends
        group: $(ref.{{ BASE_NAME }}-igm.instanceGroup)
    healthChecks: [ $(ref.{{ BASE_NAME }}-hc.selfLink) ]
- name: {{ BASE_NAME }}-bes-test
  type: compute.v1.backendService
  properties:
    portName: {{ BASE_NAME }}-test
    backends:
      - name: {{ BASE_NAME }}-backends
        group: $(ref.{{ BASE_NAME }}-igm.instanceGroup)
    healthChecks: [ $(ref.{{ BASE_NAME }}-hc.selfLink) ]
- name: {{ BASE_NAME }}-urlmap-prod
  type: compute.v1.urlMap
  properties:
    defaultService: $(ref.{{ BASE_NAME }}-bes-prod.selfLink)
    hostRules:
      - hosts: ["*"]
        pathMatcher: pathmap
    pathMatchers:
      - name: pathmap
        defaultService: $(ref.{{ BASE_NAME }}-bes-prod.selfLink)
        pathRules:
          - paths: ["/static", "/static/*"]
            service: $(ref.{{ BASE_NAME }}-bes-prod.selfLink) 
- name: {{ BASE_NAME }}-urlmap-test
  type: compute.v1.urlMap
  properties:
    defaultService: $(ref.{{ BASE_NAME }}-bes-test.selfLink)
    hostRules:
      - hosts: ["*"]
        pathMatcher: pathmap
    pathMatchers:
      - name: pathmap
        defaultService: $(ref.{{ BASE_NAME }}-bes-test.selfLink)
        pathRules:
          - paths: ["/static", "/static/*"]
            service: $(ref.{{ BASE_NAME }}-bes-test.selfLink)  
- name: {{ BASE_NAME }}-targetproxy-prod
  type: compute.v1.targetHttpProxy
  properties:
    urlMap: $(ref.{{ BASE_NAME }}-urlmap-prod.selfLink)
- name: {{ BASE_NAME }}-targetproxy-test
  type: compute.v1.targetHttpProxy
  properties:
    urlMap: $(ref.{{ BASE_NAME }}-urlmap-test.selfLink)
- name: {{ BASE_NAME }}-l7lb-prod
  type: compute.v1.globalForwardingRule
  properties:
    IPProtocol: TCP
    IPAddress: {{ properties['LB_IP_ALIAS'] }}
    portRange: {{ LB_PORT }}
    target: $(ref.{{ BASE_NAME }}-targetproxy-prod.selfLink)
- name: {{ BASE_NAME }}-l7lb-test
  type: compute.v1.globalForwardingRule
  properties:
    IPProtocol: TCP
    IPAddress: {{ properties['LB_IP_ALIAS'] }}
    portRange: {{ LB_PORT_TEST }}
    target: $(ref.{{ BASE_NAME }}-targetproxy-test.selfLink)
- name: {{ BASE_NAME }}-lb
  type: compute.v1.firewall
  properties:
    network: $(ref.{{ properties["network"] }}.selfLink)
    sourceRanges: [ {{ GCLOUD_STATIC_IP }}]
    allowed:
    - IPProtocol: TCP
      ports: [{{ HEALTH_CHECK_PORT }}]