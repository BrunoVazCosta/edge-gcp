{#
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
#}

{% set COMPUTE_URL_BASE = 'https://www.googleapis.com/compute/v1/' %}
{% set BASE_NAME = env['deployment'] + '-' + properties["infra"].datacenters.primary.name + '-' + env['name'] %}
{% set zone = properties['infra'].datacenters.primary.zone %}
{% set machineType = properties['infra'].ms.machineType %}
{% set diskSizeGb = properties['infra'].ms.diskSizeGb %}


resources:
- name: {{ BASE_NAME }}
  type: compute.v1.instance
  properties:
    zone: {{ zone }}
    machineType: {{ COMPUTE_URL_BASE }}projects/{{ env['project'] }}/zones/{{ zone }}/machineTypes/{{ machineType }}

    metadata:
      items:
      - key: ssh-keys
        value: {{ properties['public_key'] }}
      - key: startup-script
        value: |
          if [ -d "/opt/apigee" ]; then
            exit 1
          fi

          export VERSION="{{ properties['repo'].apigee.version }}"
          export REPO_HOST="{{ properties['repo'].apigee.host }}"
          export REPO_PROTOCOL="{{ properties['repo'].apigee.protocol }}"
          export REPO_USER="{{ properties['repo'].apigee.user }}"
          export REPO_PASSWORD="{{ properties['repo'].apigee.password }}"
          export REPO_STAGE={{ properties["repo"].apigee.stage }}
          export HOST_NAMES="{{ properties['HOST_NAMES'] }}"
          export HOST_NAMES=$(hostname -i):$HOST_NAMES
          export APIGEE_ADMIN_EMAIL="{{ properties['setup'].apigee_admin_email }}"
          export APIGEE_ADMINPW="{{ properties['setup'].apigee_admin_password }}"
          export APIGEE_LDAPPW="{{ properties['setup'].apigee_ldappw }}"
          export ORG_NAME="{{ properties['setup'].org_name }}"
          export SKIP_SMTP="{{ properties['setup'].skip_smtp }}"
          export SMTPHOST="{{ properties['setup'].smtp_host }}"
          export SMTPUSER="{{ properties['setup'].smtp_user }}"
          export SMTPPASSWORD="{{ properties['setup'].smtp_password }}"
          export SMTPSSL="{{ properties['setup'].smtp_ssl }}"
          export SMTPPORT="{{ properties['setup'].smtp_port }}"
          export SMTPMAILFROM="{{ properties['setup'].smtp_mail_from }}"
          export LB_IP_ALIAS="{{ properties['LB_IP_ALIAS'] }}"
          export topology="{{ properties['infra'].topology }}"
          export SCRIPT_BASEPATH="{{ properties['setup'].script_base_path }}"
          export DS_CWC="{{ properties['setup'].config.code_with_config.ds }}"
          export MS_CWC="{{ properties['setup'].config.code_with_config.ms }}"
          export ROUTER_CWC="{{ properties['setup'].config.code_with_config.router }}"
          export MP_CWC="{{ properties['setup'].config.code_with_config.mp }}"
          export AX_CWC="{{ properties['setup'].config.code_with_config.ax }}"
          export thirdparty="{{ properties["repo"].thirdparty }}"

          mkdir -p ~/.ssh
          touch ~/.ssh/id_rsa
          echo "{{ properties['private_key'] }}" >> ~/.ssh/id_rsa
          sed -i s/-----BEGIN[[:space:]]RSA[[:space:]]PRIVATE[[:space:]]KEY-----[[:space:]]//g ~/.ssh/id_rsa
          sed -i s/[[:space:]]-----END[[:space:]]RSA[[:space:]]PRIVATE[[:space:]]KEY-----//g ~/.ssh/id_rsa
          tr  ' ' '\n' < ~/.ssh/id_rsa  > ~/.ssh/test_rsa
          mv -f ~/.ssh/test_rsa ~/.ssh/id_rsa
          sed -i '1s/^/-----BEGIN RSA PRIVATE KEY-----\n/' ~/.ssh/id_rsa
          echo "-----END RSA PRIVATE KEY-----" >> ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa



          export TERM=xterm-256color
          mkdir -p /tmp/apigee
          mkdir -p /tmp/apigee/log

          echo $thirdparty
          IFS=','
          thirdparty_ary=($thirdparty)
          for item in ${thirdparty_ary[*]}
          do
            thirdparty_item=$item
            echo $thirdparty_item
            thirdparty_item=${thirdparty_item/[/}
            thirdparty_item=${thirdparty_item/]/}
            thirdparty_item=${thirdparty_item/\'/}
            thirdparty_item=${thirdparty_item/\'/}
            thirdparty_item="$(echo -e "${thirdparty_item}" | tr -d '[:space:]')"
            echo $thirdparty_item
            #To ensure that it works atleast once every 3 times
            for number in {1..3}
            do
              yum install -y $thirdparty_item
            done
          done

          #Get ansible scripts in /tmp/apigee/ansible-scripts directory
          
          mkdir -p /tmp/apigee/ansible-scripts
          cd /tmp/apigee/ansible-scripts
          curl -L $SCRIPT_BASEPATH/download_files.sh | sh -

          #Setup vaults
          #Lets replace the  values
          cd /tmp/apigee/ansible-scripts/startup-scripts/vaults
          sed -i.bak s/user_ftp/"${REPO_USER}"/g server.js
          sed -i.bak s/pass_ftp/"${REPO_PASSWORD}"/g server.js
          sed -i.bak s/user_apigee/"${APIGEE_ADMIN_EMAIL}"/g server.js
          sed -i.bak s/password_apigee/"${APIGEE_ADMINPW}"/g server.js
          sed -i.bak s/pwd_ldap/"${APIGEE_LDAPPW}"/g server.js
          sed -i.bak s/password_smtp/"${SMTPPASSWORD}"/g server.js
          rm -fr server.js.bak

          chmod +x /tmp/apigee/ansible-scripts/startup-scripts/setup_vault.sh
          mv /tmp/apigee/ansible-scripts/apigee.vault.service /etc/systemd/system/
          systemctl daemon-reload
          systemctl enable apigee.vault.service
          systemctl start apigee.vault.service


          #Config parameters starts

          echo {{ properties["setup"].license }} | tr " " "\n" >> /tmp/apigee/ansible-scripts/config/license.txt

          #Copy the right file based on topology
          cp -fr  /tmp/apigee/ansible-scripts/config/config{{ properties['infra'].topology }}.txt /tmp/apigee/ansible-scripts/config/config.txt
          cp -fr  /tmp/apigee/ansible-scripts/inventory/hosts_EDGE_{{ properties['infra'].topology }}node /tmp/apigee/ansible-scripts/inventory/hosts

          bash /tmp/apigee/ansible-scripts/startup-scripts/prepare_config_file.sh $topology $HOST_NAMES $APIGEE_ADMIN_EMAIL $APIGEE_ADMINPW $ORG_NAME $LB_IP_ALIAS $SKIP_SMTP $SMTPHOST $SMTPMAILFROM $SMTPSSL $SMTPUSER $SMTPPASSWORD


          #Run ansible and complete the setup
          cd /tmp/apigee/ansible-scripts/playbook
          ansible-playbook --extra-vars "apigee_user=$REPO_USER apigee_password=$REPO_PASSWORD repohost=$REPO_HOST repoprotocol=$REPO_PROTOCOL repostage=$REPO_STAGE version=$VERSION" -i ../inventory/hosts -u apigee edge-setup-playbook.yaml

          #Code with Config settings
          bash /tmp/apigee/ansible-scripts/startup-scripts/create_cwc_properties.sh "management-server.properties" "$MS_CWC"
          bash /tmp/apigee/ansible-scripts/startup-scripts/create_cwc_properties.sh "shared.properties" "$DS_CWC"

          if [[ $topology = '2' ]]; then
            bash /tmp/apigee/ansible-scripts/startup-scripts/create_cwc_properties.sh "router.properties" "$ROUTER_CWC"
            bash /tmp/apigee/ansible-scripts/startup-scripts/create_cwc_properties.sh "message-processor.properties" "$MP_CWC"
            bash /tmp/apigee/ansible-scripts/startup-scripts/create_cwc_properties.sh "shared.properties" "$AX_CWC"
          fi

          #Restart Apigee Service to make code with config available
          /opt/apigee/apigee-service/bin/apigee-all restart
          
          ansible-playbook -i ../inventory/hosts -u apigee edge-dashboard-playbook.yaml
          ansible-playbook -i ../inventory/hosts -u apigee edge-telegraf-playbook.yaml
          ansible-playbook -i ../inventory/hosts -u apigee dp-playbook.yaml

    disks:
    - deviceName: boot
      type: PERSISTENT
      boot: true
      autoDelete: true
      initializeParams:
        diskName: {{ BASE_NAME }}-disk
        diskSizeGb: {{ diskSizeGb }}
        diskType: {{ COMPUTE_URL_BASE }}projects/{{ env['project'] }}/zones/{{ zone }}/diskTypes/pd-ssd
        sourceImage: {{ properties["sourceImage"] }}
    networkInterfaces:
    - network: $(ref.{{ properties["network"] }}.selfLink)
      subnetwork : $(ref.{{ properties["subnet"] }}.selfLink)
      accessConfigs:
      - name: External NAT
        type: ONE_TO_ONE_NAT
outputs:
- name: myIp
  value: $(ref.{{ BASE_NAME }}.networkInterfaces[0].networkIP)
- name: selfLink
  value: $(ref.{{ BASE_NAME }}.selfLink)