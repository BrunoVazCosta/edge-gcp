{% set COMPUTE_URL_BASE = 'https://www.googleapis.com/compute/v1/' %}

resources:
  - name: {{ env["name"] }}
    type: compute.v1.instanceTemplate
    properties:
       properties:
         machineType: {{ properties['machineType'] }}
         softwareRepo: {{ properties['softwareRepo'] }}
         version: {{ properties['version'] }}
         HOST_NAMES: {{ properties['HOST_NAMES'] }}
         APIGEE_ADMIN_EMAIL: {{ properties['APIGEE_ADMIN_EMAIL'] }}
         APIGEE_ADMINPW: {{ properties['APIGEE_ADMINPW'] }}
         ORG_NAME: {{ properties['ORG_NAME'] }}
         LB_IP_ALIAS: {{ properties['LB_IP_ALIAS'] }}
         SCRIPT_BASEPATH: {{ properties['SCRIPT_BASEPATH'] }}
         nodes: {{ properties['nodes'] }}
         metadata:
            items:
            - key: ssh-keys
              value: {{ properties['public-key'] }}
            - key: startup-script
              value: |
               mkdir -p /tmp/apigee
               mkdir -p /tmp/apigee/log
               export SOFTWARE_REPO="{{ properties['softwareRepo'] }}"
               export VERSION="{{ properties['version'] }}"
               export FTP_USER=$(echo "{{ properties["ftp"].user }}")
               export FTP_PASSWORD=$(echo "{{ properties["ftp"].password }}")
               export HOST_NAMES="{{ properties['HOST_NAMES'] }}"
               export MSIP="{{ properties['msip'] }}"
               export HOST_NAMES=$MSIP:$HOST_NAMES
               export APIGEE_ADMIN_EMAIL="{{ properties['APIGEE_ADMIN_EMAIL'] }}"
               export APIGEE_ADMINPW="{{ properties['APIGEE_ADMINPW'] }}"
               export ORG_NAME="{{ properties['ORG_NAME'] }}"
               export LB_IP_ALIAS="{{ properties['LB_IP_ALIAS'] }}"
               SCRIPT_BASEPATH="{{ properties['SCRIPT_BASEPATH'] }}"
               mkdir -p ~/.ssh
               touch ~/.ssh/id_rsa
               echo "{{ properties['private-key'] }}" >> ~/.ssh/id_rsa
               sed -i s/-----BEGIN[[:space:]]RSA[[:space:]]PRIVATE[[:space:]]KEY-----[[:space:]]//g ~/.ssh/id_rsa
               sed -i s/[[:space:]]-----END[[:space:]]RSA[[:space:]]PRIVATE[[:space:]]KEY-----//g ~/.ssh/id_rsa
               tr  ' ' '\n' < ~/.ssh/id_rsa  > ~/.ssh/test_rsa
               mv -f ~/.ssh/test_rsa ~/.ssh/id_rsa
               sed -i '1s/^/-----BEGIN RSA PRIVATE KEY-----\n/' ~/.ssh/id_rsa
               echo "-----END RSA PRIVATE KEY-----" >> ~/.ssh/id_rsa
               chmod 400 ~/.ssh/id_rsa
          
               redhat_release=$(cat /etc/os-release|grep VERSION_ID|cut -d'=' -f2|sed 's/\"//g'|sed 's/\..*//g')
               echo $redhat_release
               if [ "$redhat_release" = "7" ]; then
                  curl -o /tmp/apigee/epel-release-7-8.noarch.rpm  http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-8.noarch.rpm
                  rpm -ivh /tmp/apigee/epel-release-7-8.noarch.rpm
               else
                 curl -o /tmp/apigee/epel-release-6-8.noarch.rpm  http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
                 rpm -ivh /tmp/apigee/epel-release-6-8.noarch.rpm
                 yum install nc.x86_64 -y
               fi

               yum install ansible -y
               #Disable epel
               sed -i 's^enabled=1^enabled=0^g' /etc/yum.repos.d/epel.repo || true

               #Get ansible scripts in /tmp/apigee/ansible directory
               mkdir /tmp/apigee/ansible-scripts
               mkdir /tmp/apigee/ansible-scripts/inventory
               mkdir /tmp/apigee/ansible-scripts/playbook
               mkdir /tmp/apigee/ansible-scripts/config

               echo {{ properties["license"] }} | tr " " "\n" >> /tmp/apigee/ansible-scripts/config/license.txt

               curl -o /tmp/apigee/ansible-scripts/inventory/hosts_EDGE_5node  $SCRIPT_BASEPATH/ansible-scripts/inventory/hosts_EDGE_5node
               curl -o /tmp/apigee/ansible-scripts/inventory/hosts_EDGE_7node  $SCRIPT_BASEPATH/ansible-scripts/inventory/hosts_EDGE_7node
               curl -o /tmp/apigee/ansible-scripts/inventory/hosts_EDGE_9node  $SCRIPT_BASEPATH/ansible-scripts/inventory/hosts_EDGE_9node
               curl -o /tmp/apigee/ansible-scripts/inventory/hosts_EDGE_rmp  $SCRIPT_BASEPATH/ansible-scripts/inventory/hosts_EDGE_rmp

               curl -o /tmp/apigee/ansible-scripts/config/config5.txt  $SCRIPT_BASEPATH/ansible-scripts/config/config5.txt
               curl -o /tmp/apigee/ansible-scripts/config/config7.txt  $SCRIPT_BASEPATH/ansible-scripts/config/config7.txt
               curl -o /tmp/apigee/ansible-scripts/config/config9.txt  $SCRIPT_BASEPATH/ansible-scripts/config/config9.txt
               curl -o /tmp/apigee/ansible-scripts/config/setup-org-prod.txt  $SCRIPT_BASEPATH/ansible-scripts/config/setup-org-prod.txt
               curl -o /tmp/apigee/ansible-scripts/config/setup-org-test.txt  $SCRIPT_BASEPATH/ansible-scripts/config/setup-org-test.txt
               curl -o /tmp/apigee/ansible-scripts/config/grafana.txt  $SCRIPT_BASEPATH/ansible-scripts/config/grafana.txt

               curl -o /tmp/apigee/ansible-scripts/playbook/ansible.cfg  $SCRIPT_BASEPATH/ansible-scripts/playbook/ansible.cfg
               curl -o /tmp/apigee/ansible-scripts/playbook/ds-playbook.yaml  $SCRIPT_BASEPATH/ansible-scripts/playbook/ds-playbook.yaml
               curl -o /tmp/apigee/ansible-scripts/playbook/rmp-playbook.yaml  $SCRIPT_BASEPATH/ansible-scripts/playbook/rmp-playbook.yaml
               curl -o /tmp/apigee/ansible-scripts/playbook/ps-playbook.yaml  $SCRIPT_BASEPATH/ansible-scripts/playbook/ps-playbook.yaml
               curl -o /tmp/apigee/ansible-scripts/playbook/qs-playbook.yaml  $SCRIPT_BASEPATH/ansible-scripts/playbook/qs-playbook.yaml
               curl -o /tmp/apigee/ansible-scripts/playbook/ms-playbook.yaml  $SCRIPT_BASEPATH/ansible-scripts/playbook/ms-playbook.yaml
               curl -o /tmp/apigee/ansible-scripts/playbook/orgsetup-playbook.yaml  $SCRIPT_BASEPATH/ansible-scripts/playbook/orgsetup-playbook.yaml
               curl -o /tmp/apigee/ansible-scripts/playbook/edge-prerequisite-playbook.yaml  $SCRIPT_BASEPATH/ansible-scripts/playbook/edge-prerequisite-playbook.yaml
               curl -o /tmp/apigee/ansible-scripts/playbook/edge-components-setup-playbook.yaml    $SCRIPT_BASEPATH/ansible-scripts/playbook/edge-components-setup-playbook.yaml
               curl -o /tmp/apigee/ansible-scripts/playbook/edge-setup-playbook.yaml  $SCRIPT_BASEPATH/ansible-scripts/playbook/edge-setup-playbook.yaml
               curl -o /tmp/apigee/ansible-scripts/playbook/edge-presetup-playbook.yaml  $SCRIPT_BASEPATH/ansible-scripts/playbook/edge-presetup-playbook.yaml
               curl -o /tmp/apigee/ansible-scripts/playbook/edge-uninstall-playbook.yaml  $SCRIPT_BASEPATH/ansible-scripts/playbook/edge-uninstall-playbook.yaml
               curl -o /tmp/apigee/ansible-scripts/playbook/edge-dashboard-playbook.yaml  $SCRIPT_BASEPATH/ansible-scripts/playbook/edge-dashboard-playbook.yaml
               curl -o /tmp/apigee/ansible-scripts/playbook/edge-telegraf-playbook.yaml  $SCRIPT_BASEPATH/ansible-scripts/playbook/edge-telegraf-playbook.yaml

          
               #Copy the right file based on node number
               cp -fr  /tmp/apigee/ansible-scripts/config/config{{ properties['nodes'] }}.txt /tmp/apigee/ansible-scripts/config/config.txt
               cp -fr  /tmp/apigee/ansible-scripts/inventory/hosts_EDGE_rmp /tmp/apigee/ansible-scripts/inventory/hosts

               IFS=':'
               hosts_ary=($HOST_NAMES)
               c=1
               for i in "${hosts_ary[@]}"
               do
                if [[ ${i} != 'empty' ]]; then
                  key='HOST'$c'_INTERNALIP'
                  export ${key}=${i}
                  sed -i.bak s/${key}/${i}/g /tmp/apigee/ansible-scripts/config/config.txt
                  sed -i.bak s/${key}/${i}/g /tmp/apigee/ansible-scripts/config/grafana.txt
                  sed -i.bak s/${key}/${i}/g /tmp/apigee/ansible-scripts/config/setup-org-prod.txt
                  sed -i.bak s/${key}/${i}/g /tmp/apigee/ansible-scripts/config/setup-org-test.txt
                  ((c++))
                fi
               done              
               MYHOST=$(hostname -i)
               cd /tmp/apigee/ansible-scripts/inventory
               sed -i.bak s/HOST_RMP/${MYHOST}/g hosts

               cd /tmp/apigee/ansible-scripts/config
               sed -i.bak s/ADMIN_EMAIL=/ADMIN_EMAIL="${APIGEE_ADMIN_EMAIL}"/g config.txt
               sed -i.bak s/ADMIN_EMAIL=/ADMIN_EMAIL="${APIGEE_ADMIN_EMAIL}"/g setup-org-prod.txt
               sed -i.bak s/ADMIN_EMAIL=/ADMIN_EMAIL="${APIGEE_ADMIN_EMAIL}"/g setup-org-test.txt

               sed -i.bak s/APIGEE_ADMINPW=/APIGEE_ADMINPW="${APIGEE_ADMINPW}"/g config.txt
               sed -i.bak s/APIGEE_ADMINPW=/APIGEE_ADMINPW="${APIGEE_ADMINPW}"/g setup-org-prod.txt
               sed -i.bak s/APIGEE_ADMINPW=/APIGEE_ADMINPW="${APIGEE_ADMINPW}"/g setup-org-test.txt

               sed -i.bak s/ORG_NAME=/ORG_NAME="${ORG_NAME}"/g setup-org-prod.txt
               sed -i.bak s/ORG_NAME=/ORG_NAME="${ORG_NAME}"/g setup-org-test.txt

               sed -i.bak s/LBDNS/"${LB_IP_ALIAS}"/g config.txt
               sed -i.bak s/LBDNS/"${LB_IP_ALIAS}"/g setup-org-prod.txt
               sed -i.bak s/LBDNS/"${LB_IP_ALIAS}"/g setup-org-test.txt

               

               cd /tmp/apigee/ansible-scripts/playbook
               ansible-playbook --extra-vars "apigee_user=$FTP_USER apigee_password=$FTP_PASSWORD softwareRepo=$SOFTWARE_REPO version=$VERSION" -i ../inventory/hosts -u apigee edge-prerequisite-playbook.yaml

               ansible-playbook --extra-vars "apigee_user=$FTP_USER apigee_password=$FTP_PASSWORD softwareRepo=$SOFTWARE_REPO version=$VERSION" -i ../inventory/hosts -u apigee edge-presetup-playbook.yaml

               #Change run user to root
               echo "RUN_USER=root" >> /opt/apigee/etc/defaults.sh

               if [ "$redhat_release" = "7" ]; then
                  while ! echo -n > /dev/tcp/$MSIP/8080 ; do
                     echo "."
                     sleep 30
                  done
               else
                 while ! nc -z $MSIP 8080; do  
                   echo "."
                   sleep 30
                 done
               fi

               echo "MSIP launched"
               #Do whatever you want
               #wait for final 30 secs for MS to complete the registeration
               sleep 5

               echo 'port 8080 is open'
               
               ansible-playbook --extra-vars "apigee_user=$FTP_USER apigee_password=$FTP_PASSWORD softwareRepo=$SOFTWARE_REPO version=$VERSION" -i ../inventory/hosts -u apigee rmp-playbook.yaml
               #ansible-playbook -i ../inventory/hosts -u apigee orgsetup-playbook.yaml
               ansible-playbook -i ../inventory/hosts -u apigee edge-telegraf-playbook.yaml

               #install jq to parse json
               cd /tmp/apigee
               wget https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64
               cp -fr jq-linux64 /usr/bin/jq
               chmod 777 /usr/bin/jq

               IFS=','
               export MSIP="{{ properties['msip'] }}"
               export ADMIN_EMAIL="{{ properties['APIGEE_ADMIN_EMAIL'] }}"
               export ADMIN_PWD="{{ properties['APIGEE_ADMINPW'] }}"
               export ORG_NAME="{{ properties['ORG_NAME'] }}"
                
               export uuid=$(curl -s http://localhost:8082/v1/servers/self | jq --raw-output '.uUID')
               export routeruuid=$(curl -s http://localhost:8081/v1/servers/self | jq --raw-output '.uUID')
               echo $uuid
               echo $routeruuid

               curl0=$(echo $(eval echo 'curl -v -u $ADMIN_EMAIL:$ADMIN_PWD -X POST http://$MSIP:8080/v1/o/$ORG_NAME/e/test/servers -d \"uuid=$uuid\&action=add\"'))

                
               curl01=$(echo $(eval echo 'curl -v -u $ADMIN_EMAIL:$ADMIN_PWD -X POST http://$MSIP:8080/v1/o/$ORG_NAME/e/prod/servers -d \"uuid=$uuid\&action=add\"'))


               curl1=$(echo $(eval echo 'curl -v -u $ADMIN_EMAIL:$ADMIN_PWD -X POST http://$MSIP:8080/v1/o/$ORG_NAME/e/test/servers -d \"uuid=$uuid\&region=dc-1\&pod=gateway\&action=remove\"'))

                
               curl2=$(echo $(eval echo 'curl -v -u $ADMIN_EMAIL:$ADMIN_PWD -X POST http://$MSIP:8080/v1/o/$ORG_NAME/e/prod/servers -d \"uuid=$uuid\&region=dc-1\&pod=gateway\&action=remove\"'))

               curl3=$(echo $(eval echo 'curl -v -u $ADMIN_EMAIL:$ADMIN_PWD -X POST http://$MSIP:8080/v1/servers -d \"type=message-processor\&region=dc-1\&pod=gateway\&uuid=$uuid\&action=remove\"'))
                
               curl4=$(echo $(eval echo 'curl -v -u $ADMIN_EMAIL:$ADMIN_PWD -X POST http://$MSIP:8080/v1/servers -d \"type=router\&region=dc-1\&pod=gateway\&uuid=$routeruuid\&action=remove\"'))

               curl6=$(echo $(eval echo 'curl -v -u $ADMIN_EMAIL:$ADMIN_PWD -X DELETE \"http://$MSIP:8080/v1/servers/$routeruuid\"'))

               curl5=$(echo $(eval echo 'curl -v -u $ADMIN_EMAIL:$ADMIN_PWD -X DELETE \"http://$MSIP:8080/v1/servers/$uuid\"'))

                
               echo $curl1 >> /tmp/apigee/shutdown.sh
               echo "sleep 10"  >> /tmp/apigee/shutdown.sh
               echo $curl2 >> /tmp/apigee/shutdown.sh
               echo "sleep 10"  >> /tmp/apigee/shutdown.sh
               echo $curl3 >> /tmp/apigee/shutdown.sh
               echo "sleep 10"  >> /tmp/apigee/shutdown.sh
               echo $curl4 >> /tmp/apigee/shutdown.sh
               echo "sleep 10"  >> /tmp/apigee/shutdown.sh
               echo $curl5 >> /tmp/apigee/shutdown.sh
               echo "sleep 10"  >> /tmp/apigee/shutdown.sh
               echo $curl6 >> /tmp/apigee/shutdown.sh
               echo "sleep 10"  >> /tmp/apigee/shutdown.sh
               chmod +x /tmp/apigee/shutdown.sh

               sleep $((RANDOM %20))
               sleep $((RANDOM %10))
               eval $curl0
               sleep $((RANDOM %20))
               sleep $((RANDOM %10))
               eval $curl01


            - key: shutdown-script
              value: |
                
                /opt/apigee/apigee-service/bin/apigee-all stop
                /tmp/apigee/shutdown.sh
                cd /tmp/apigee/ansible-scripts/playbook
                ansible-playbook -i ../inventory/hosts -u apigee edge-uninstall-playbook.yaml
                rm -fr /tmp/apigee
                rm -fr ~/.ssh/id_rsa

         disks:
           - deviceName: boot
             boot: true
             autoDelete: true
             mode: READ_WRITE
             type: PERSISTENT
             initializeParams:
               diskType: pd-standard
               diskSizeGb: 20
               sourceImage: {{ properties["sourceImage"] }}
         networkInterfaces:
           - accessConfigs:
               - name: external-nat
                 type: ONE_TO_ONE_NAT
             network: $(ref.{{ properties["network"] }}.selfLink)
             subnetwork : $(ref.{{ properties["subnet"] }}.selfLink)